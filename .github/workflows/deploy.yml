name: Deploy ststas.dev

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          echo "$SSH_PRIVATE_KEY" > aws_rsa.pem
          chmod 600 aws_rsa.pem
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Debug private key
        run: |
          cat aws_rsa.pem | head -n 5
          ls -l aws_rsa.pem

      - name: Check SSH connection
        run: |
          ssh -i aws_rsa.pem -v -o StrictHostKeyChecking=no ubuntu@$AWS_LS_IP
        env:
          AWS_LS_IP: ${{ secrets.AWS_LS_IP }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Determine changed folders
        id: changes
        run: |
          echo "CHANGED_BACKEND=false" >> $GITHUB_ENV
          echo "CHANGED_FRONTEND=false" >> $GITHUB_ENV

          git fetch origin main
          if git diff --name-only origin/main...HEAD | grep '^backend/'; then
            echo "CHANGED_BACKEND=true" >> $GITHUB_ENV
          fi
          if git diff --name-only origin/main...HEAD | grep '^frontend/'; then
            echo "CHANGED_FRONTEND=true" >> $GITHUB_ENV
          fi

      - name: Deploy to server
        run: |
          ssh -i aws_rsa.pem -o StrictHostKeyChecking=no ubuntu@$AWS_LS_IP "mkdir -p /home/ubuntu/todolist && chmod 777 /home/ubuntu/todolist"

          rsync -avz --progress -e "ssh -i aws_rsa.pem -o StrictHostKeyChecking=no" ./ ubuntu@$AWS_LS_IP:/home/ubuntu/todolist

          ssh -i aws_rsa.pem -o StrictHostKeyChecking=no ubuntu@$AWS_LS_IP << 'EOF'
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 1G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo "/swapfile none swap sw 0 0" | sudo tee -a /etc/fstab
            fi

            cd /home/ubuntu/todolist

            docker system prune -af

            if [ "${CHANGED_BACKEND}" = "true" ] && [ "${CHANGED_FRONTEND}" = "true" ]; then
              echo "Both frontend and backend changed"
              cd frontend
              npm ci
              npm run build
              cd ..
              docker-compose down
              docker-compose up -d --build
            elif [ "${CHANGED_FRONTEND}" = "true" ]; then
              echo "Only frontend changed"
              cd frontend
              npm ci
              npm run build
              cd ..
              docker-compose stop frontend
              docker-compose up -d --build frontend
            elif [ "${CHANGED_BACKEND}" = "true" ]; then
              echo "Only backend changed"
              docker-compose restart backend
            else
              echo "No relevant changes detected. Skipping deploy."
            fi
          EOF
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          AWS_LS_IP: ${{ secrets.AWS_LS_IP }}
          CHANGED_BACKEND: ${{ env.CHANGED_BACKEND }}
          CHANGED_FRONTEND: ${{ env.CHANGED_FRONTEND }}
